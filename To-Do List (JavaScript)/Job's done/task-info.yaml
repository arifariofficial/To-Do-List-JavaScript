type: edu
files:
  - name: src/index.html
    visible: true
    text: |
      <!doctype html>
      <html lang="en">
      <head>
          <meta charset="UTF-8">
          <title>Document</title>
      </head>
      <body>
      
      </body>
      </html>
    learner_created: false
  - name: test/test.js
    visible: false
    text: |
      const path = require('path');
      const pagePath = 'file://' + path.resolve(__dirname, '../src/index.html');
      const {StageTest, correct, wrong} = require('hs-test-web');
      
      class TodoTest extends StageTest {
      
          page = this.getPage(pagePath)
      
          tests = [
              this.page.execute(() => {
                  if (document.title !== 'To-Do List') {
                      return wrong("The title of the page should be 'To-Do List'")
                  }
                  return correct();
              }),
              this.page.execute(() => {
                  const inputField = document.getElementById("input-task")
                  if (inputField === null || inputField.tagName !== 'INPUT')
                      return wrong("Can't find input field with id '#input-task'")
      
                  const addButton = document.getElementById("add-task-button")
                  if (addButton === null || addButton.tagName !== 'BUTTON')
                      return wrong("Can't find button with id '#add-task-button'")
      
                  this.taskList = document.getElementById("task-list")
                  if (this.taskList === null || this.taskList.tagName !== 'UL')
                      return wrong("Can't find <ul> tag with id '#task-list'")
      
                  return correct();
              }),
              this.page.execute(() => {
      
                  const tasks = this.taskList.getElementsByTagName("li")
                  if (tasks.length !== 3)
                      return wrong("Inside the <ul> tag should be 3 <li> elements!")
      
                  for (let task of tasks) {
                      const checkbox = task.querySelector("input[type=checkbox]")
                      if (checkbox === null)
                          return wrong("Inside each <li> tag should one <input> tag with 'checkbox' type")
      
                      const taskName = task.querySelector("span.task")
                      if (taskName === null)
                          return wrong("Inside each <li> tag should one <span> tag with 'task' class")
      
                      const deleteButton = task.querySelector("button.delete-btn")
                      if (deleteButton === null)
                          return wrong("Inside each <li> tag should one <button> tag with 'delete-btn' class")
                  }
      
                  return correct();
              }),
              this.page.execute(() => {
      
                  const inputField = document.getElementById("input-task")
                  if (inputField.tagName !== 'INPUT')
                      return wrong("Can't find input field with id '#input-task'")
      
                  inputField.value = "New task for the test purpose"
      
                  const addButton = document.getElementById("add-task-button")
                  if (addButton.tagName !== 'BUTTON')
                      return wrong("Can't find button with id '#add-task-button'")
      
                  addButton.click()
      
                  const tasks = this.taskList.getElementsByTagName("li")
                  if (tasks.length !== 4)
                      return wrong("After adding a new task to the To-Do list, there should be 4 <li> tags inside the <ul> list")
      
                  for (let task of tasks) {
      
                      const taskName = task.querySelector("span.task")
                      if (taskName === null)
                          return wrong("Inside each <li> tag should one <span> tag with 'task' class")
      
                      if (taskName.textContent === "New task for the test purpose") {
                          return correct()
                      }
                  }
      
                  return wrong("Can't find task with name 'New task for the test purpose'.\n" +
                      "The task name should be placed in <span> tag with class 'task'!")
              }),
              this.page.execute(() => {
      
                  let tasks = this.taskList.getElementsByTagName("li")
      
                  for (let task of tasks) {
                      const taskName = task.querySelector("span.task")
                      if (taskName === null)
                          return wrong("Inside each <li> tag should one <span> tag with 'task' class")
      
                      if (taskName.textContent === "New task for the test purpose") {
                          const deleteButton = task.querySelector("button.delete-btn")
                          if (deleteButton === null)
                              return wrong("Inside each <li> tag should one <button> tag with 'delete-btn' class")
                          deleteButton.click()
                          break
                      }
                  }
      
                  tasks = this.taskList.getElementsByTagName("li")
      
                  for (let task of tasks) {
                      const taskName = task.querySelector("span.task")
                      if (taskName === null)
                          return wrong("Inside each <li> tag should one <span> tag with 'task' class")
      
                      if (taskName.textContent === "New task for the test purpose") {
                          return wrong("After deleting a task with name 'New task for the test purpose' it is still in the task list!")
                      }
                  }
      
                  return correct()
              }),
              this.page.execute(async () => {
      
                  const tasks = this.taskList.getElementsByTagName("li")
      
                  if (tasks.length !== 3)
                      return wrong("After adding a new task to the To-Do list, there should be 3 <li> tags inside the <ul> list")
      
                  const task = tasks[1]
      
                  const checkbox = task.querySelector("input[type=checkbox]")
      
                  if (checkbox.checked) {
                      return wrong("By default a checkbox should be unchecked!")
                  }
      
                  checkbox.click()
      
                  let taskName = task.querySelector("span.task")
                  if (taskName === null)
                      return wrong("Inside each <li> tag should be one <span> tag with 'task' class")
      
                  if (!window.getComputedStyle(taskName).textDecoration.includes("line-through")) {
                      return wrong("If checkbox is checked the task name should be crossed out.\n" +
                          "The span tag with task name should have 'text-decoration: line-through' style")
                  }
      
                  checkbox.click()
      
                  if (window.getComputedStyle(taskName).textDecoration.includes("line-through")) {
                      return wrong("If checkbox is unchecked the task name shouldn't be crossed out.\n" +
                          "The span tag with task name shouldn't have 'text-decoration: line-through' style")
                  }
      
                  return correct()
              })
          ]
      }
      
      it('Test stage', async function () {
          try {
              this.timeout(30000)
          } catch (ignored) {
          }
          await new TodoTest().runTests()
      }, 30000)
    learner_created: false
  - name: src/index.js
    visible: true
    text: |
      document.addEventListener("DOMContentLoaded", function () {
        const addTaskButton = document.getElementById("add-task-button");
        addTaskButton.addEventListener("click", function () {
          const taskInput = document.getElementById("input-task");
          const newTask = taskInput.value;
      
          const li = document.createElement("li");
      
          const checkbox = document.createElement("input");
          checkbox.type = "checkbox";
          li.appendChild(checkbox);
      
          const span = document.createElement("span");
          span.className = "task";
          span.textContent = newTask;
          li.appendChild(span);
      
          const button = document.createElement("button");
          button.className = "delete-btn";
          button.innerHTML = "&#8998";
          li.appendChild(button);
      
          button.onclick = function () {
            this.parentNode.remove();
          };
      
          document.getElementById("task-list").appendChild(li);
          taskInput.value = "";
        });
      
        const checkBox = document.getElementById();
      });
    learner_created: true
  - name: src/style.css
    visible: true
    text: |-
      .task-completed {
          text-decoration: line-through;
      }
    learner_created: true
feedback_link: https://hyperskill.org/projects/183/stages/929/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Fri, 23 Feb 2024 13:34:09 UTC"
record: 3
